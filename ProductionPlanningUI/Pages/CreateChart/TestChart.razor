<h3>Test Chart</h3>


<SfGantt DataSource="@TaskCollection" Height="450px" Width="1200px">
    <GanttTaskFields Id="Id" Name="ProductId" StartDate="EarliestStartDate" EndDate="Deadline"
                      Progress="Progress" ParentID="ParentId">
    </GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="Id" Width="150"></GanttColumn>
        <GanttColumn Field="ProductId" HeaderText="Product Id" Width="150"></GanttColumn>
        <GanttColumn Field="OrderDate" HeaderText="Order Date" Width="150"></GanttColumn>
        <GanttColumn Field="EarliestStartDate" HeaderText="Earliest Start Date" Width="150"></GanttColumn>
        <GanttColumn Field="Deadline" HeaderText="Deadline" Width="150"></GanttColumn>
        <GanttColumn Field="Progress" HeaderText="Progress" Width="150"></GanttColumn>
        <GanttColumn Field="Status" HeaderText="Status" Width="150" EditType=Syncfusion.Blazor.Grids.EditType.DefaultEdit></GanttColumn>
    </GanttColumns>
</SfGantt>

@code {
    [Parameter]
    public List<OrderModel> data { get; set; }


    private List<OrderDisplayModel> TaskCollection { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (data !=null)
        {
            List<OrderDisplayModel> temp =new();
            foreach (var order in data)
            {
                TimeSpan duration = order.Deadline - order.EarliestStartDate;

                TimeSpan elapsedDuration = DateTime.Now - order.EarliestStartDate;

                // Calculate the progress as a percentage
                int progress = (int)(elapsedDuration.TotalDays / duration.TotalDays * 100);
                string status = "Not started";
                if (progress < 100 && 0 < progress)
                {
                    status = "In progress";
                }
                else if (progress == 100)
                {
                    status = "Done";
                }
                else
                {
                    progress = 0;
                }
                temp.Add(new OrderDisplayModel
                    {
                        Id = order.Id,
                        ProductId = $"{order.ProductId}",
                        EarliestStartDate = order.EarliestStartDate,
                        Deadline = order.Deadline,
                        OrderDate = order.OrderDate,
                        Progress = progress,
                        Status = status
                    });
            }
            TaskCollection = temp;
        }
        
        return base.OnParametersSetAsync();
    }

    public static List<OrderDisplayModel> GetTaskCollection()
    {
        List<OrderDisplayModel> Tasks = new List<OrderDisplayModel>()
        {
            new OrderDisplayModel
    {
        Id = 1,
        ProductId = "P001",
        EarliestStartDate = DateTime.Parse("2023-01-10"),
        Deadline = DateTime.Parse("2023-01-20"),
        OrderDate = DateTime.Parse("2023-01-05"),
        Progress = 30,
        Status = "In Progress",
        ParentId = null
    },
    new OrderDisplayModel
    {
        Id = 2,
        ProductId = "P002",
        EarliestStartDate = DateTime.Parse("2023-02-15"),
        Deadline = DateTime.Parse("2023-03-01"),
        OrderDate = DateTime.Parse("2023-02-10"),
        Progress = 75,
        Status = "In Progress",
        ParentId = 1
    },
    new OrderDisplayModel
    {
        Id = 3,
        ProductId = "P003",
        EarliestStartDate = DateTime.Parse("2023-04-01"),
        Deadline = DateTime.Parse("2023-04-15"),
        OrderDate = DateTime.Parse("2023-03-25"),
        Progress = 100,
        Status = "Completed",
        ParentId = 2
    }
        };
        return Tasks;
    }
}